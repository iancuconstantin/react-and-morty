{"version":3,"sources":["Components/CharacterModal.jsx","api/useFetch.js","api/dataRoutes.js","Components/Characters.jsx","api/useData.js","Components/LocationModal.jsx","Components/Locations.jsx","App.js","serviceWorker.js","index.js"],"names":["CharacterModal","show","onHide","img","name","gender","species","status","origin","location","Modal","size","aria-labelledby","centered","className","Header","closeButton","Title","id","Body","src","alt","style","height","width","Footer","Button","onClick","useFetch","initUrl","useState","url","setUrl","undefined","data","setData","useEffect","fetch","then","response","json","mainUrls","Characters","pageNumber","setPageNumber","characters","pageNum","useCharacters","charactersList","setCharactersList","modalShow","setModalShow","setImg","setName","setGender","setSpecies","setStatus","setOrigin","setLocation","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","results","map","item","Card","key","image","Img","variant","Text","LocationModal","type","dimension","residents","Locations","locations","useLocations","locationsList","setLocationsList","totalResidents","modalData","setModalData","totalPages","setTotalPages","Array","info","pages","fill","_","index","length","Pagination","First","Prev","Item","text","active","changePage","Next","Last","App","isCharactersShown","setIsCharactersShow","isLocationsShown","setIsLocationsShown","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6b8e7ef1.chunk.js","sourcesContent":["import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport \"../Styles/CharacterModal.css\";\n\n\n\nfunction CharacterModal({show,onHide,img,name,gender,species,status,origin,location}) {\n    return (\n        <Modal\n        show={show}\n        onHide={onHide}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        className=\"d-flex justify-content-center\"\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                {name}\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <img \n                id=\"modalImg\"\n                className=\"mb-4\"\n                src={img} \n                alt = \"img\" \n                style={{ height: '300px', width: '227,82px' }}\n                />\n                <p>Gender: {gender}</p>\n                <p>Species: {species}</p>\n                <p>Status: {status}</p>\n                <p>Origin: {origin}</p>\n                <p>Location: {location}</p>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={onHide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default CharacterModal;","import { useState, useEffect } from \"react\";\n\n/**\n    Fetch data from the given url. If it can't get any data from the url, than it writes a message into the console.\n     *\n     * @param initUrl string that gives the route that the function fetch data from.\n     */\nexport const useFetch = (initUrl) => {\n  const [url, setUrl] = useState(initUrl);\n  const [data, setData] = useState(undefined);\n\n  useEffect(() => {\n    fetch(url)\n      .then((response) => {\n        if (response.status !== 200) return \"There must be a problem\";\n        return response.json();\n      })\n      .then((json) => setData(json));\n  }, [url]);\n\n  return [data, setUrl];\n};\n","export const mainUrls = {\n  characters: \"https://rickandmortyapi.com/api/character/?page=\",\n  locations: \"https://rickandmortyapi.com/api/location/?page=\",\n};\n","import React, {useState, useEffect} from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CharacterModal from \"./CharacterModal\";\nimport { useCharacters } from \"../api/useData\";\nimport \"../Styles/Characters.css\";\nconst Characters = () => {\n\n    const [pageNumber, setPageNumber] = useState(1)\n    const characters = useCharacters(pageNumber);\n    const [charactersList, setCharactersList] = useState([]);\n    const [modalShow, setModalShow] = useState(false);\n    const [img, setImg] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [gender, setGender] = useState(\"\");\n    const [species, setSpecies] = useState(\"\");\n    const [status, setStatus] = useState(\"\");\n    const [origin, setOrigin] = useState(\"\");\n    const [location, setLocation] = useState(\"\");\n\n    \n    const handleScroll = ()=>{\n        if(window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight)\n        return;\n        setPageNumber((pageNumber)=>pageNumber + 1);\n    }\n\n    useEffect(()=>{\n        window.addEventListener(\"scroll\", handleScroll)\n        return ()=>window.removeEventListener(\"scroll\", handleScroll)\n    },[])\n\n\n    useEffect(()=>{\n        if(characters !== \"Loading...\"){\n            setCharactersList([...charactersList, ...characters.results])\n        }\n    },[characters]);\n\n    const setData = (item) => {\n        setModalShow(true);\n        setImg(item.image);\n        setName(item.name);\n        setGender(item.gender);\n        setSpecies(item.species);\n        setStatus(item.status);\n        setOrigin(item.origin.name);\n        setLocation(item.location.name);\n    }\n\n    return(\n        <div className='container d-flex flex-column align-items-center'>\n            <div className=\"characters mb-3\">\n                {charactersList === [] ? <p>Loading...</p> : \n                \n                charactersList.map(item=>{\n                    return(\n                        <Card className=\"character\" style={{ width: '18rem' }} key={item.id} onClick={() => setData(item)}>\n                            <Card.Img variant=\"top\" src={item.image} style={{ height: '300px', width: '227,82px' }} />\n                            <Card.Body>\n                                <Card.Title>{item.name}</Card.Title>\n                                <Card.Text>\n                                Species: {item.species}\n                                </Card.Text>\n                            </Card.Body>\n                        </Card>\n                    )\n                })}\n            </div>\n            <CharacterModal\n                show={modalShow}\n                onHide={() => setModalShow(false)}\n                img = {img}\n                name = {name}\n                gender = {gender}\n                species = {species}\n                status = {status}\n                origin = {origin}\n                location = {location}\n            />\n        </div>\n    )\n}\n\nexport default Characters;","import { useEffect } from \"react\";\nimport { useFetch } from \"./useFetch.js\";\nimport { mainUrls } from \"./dataRoutes.js\";\n\n/**\n     Fetch data from an open-source API. It returns json containing pagination.\n     The json contains an `info` and a `results` property. The `info` contains every information about the pagination,\n     the `results` contains the characters objects situated in the given page number in the pagination.\n     *\n     * @param pageNum integer that gives the pagination page number. The json `info` property contains how many pages are.\n     */\nexport const useCharacters = (pageNum = 1) => {\n  const [characters, setUrl] = useFetch(mainUrls.characters + pageNum);\n  useEffect(() => {\n    setUrl(mainUrls.characters + pageNum);\n  }, [pageNum]);\n  return characters === undefined ? \"Loading...\" : characters;\n};\n\n/**\n     Fetch data from an open-source API. It returns json containing pagination.\n     The json contains an `info` and a `results` property. The `info` contains every information about the pagination,\n     the `results` contains the locations objects situated in the given page number in the pagination.\n     *\n     * @param pageNum integer that gives the pagination page number. The json `info` property contains how many pages are.\n     */\nexport const useLocations = (pageNum = 1) => {\n  const [locations, setUrl] = useFetch(mainUrls.locations + pageNum);\n  useEffect(() => {\n    setUrl(mainUrls.locations + pageNum);\n  }, [pageNum]);\n  return locations === undefined ? \"Loading...\" : locations;\n};\n","import React from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\n\n\n\nfunction LocationModal({show,onHide,name,type,dimension,residents}) {\n    return (\n        <Modal\n        show={show}\n        onHide={onHide}\n        size=\"lg\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        className=\"d-flex justify-content-center\"\n        >\n        <Modal.Header closeButton>\n            <Modal.Title id=\"contained-modal-title-vcenter\">\n            {name}\n            </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n            <h4>{name} about: </h4>\n            <p>Type: {type}</p>\n            <p>Dimension: {dimension}</p>\n            <p>Residents: {residents}</p>\n        </Modal.Body>\n        <Modal.Footer>\n            <Button onClick={onHide}>Close</Button>\n        </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default LocationModal;","import React, {useState, useEffect} from 'react';\nimport { useLocations } from \"../api/useData\";\nimport Card from 'react-bootstrap/Card';\nimport Pagination from 'react-bootstrap/Pagination';\nimport LocationModal from \"./LocationModal\";\nimport \"../Styles/Locations.css\";\n\nconst Locations = () => {\n    const [pageNumber, setPageNumber] = useState(1)\n    const locations = useLocations(pageNumber);\n    const [locationsList, setLocationsList] = useState([]);\n    const [modalShow, setModalShow] = useState(false);\n    const [name, setName] = useState(\"\");\n    const [type, setType] = useState(\"\");\n    const [dimension, setDimension] = useState(\"\");\n    const [residents, setResidents] = useState(0);\n    const [modalData, setModalData] = useState({name:\"\", type: \"\", dimension: \"\", totalResidents: 0});\n    const [totalPages, setTotalPages] = useState([]);\n    \n\n\n    useEffect(()=>{\n        if(locations !== \"Loading...\"){\n            setLocationsList(locations.results)\n            setTotalPages(Array(locations.info.pages).fill().map((_,index)=>index+1));\n        }\n    },[locations]);\n    \n\n    const setData = ({name, type, dimension, residents}) => {\n        setModalShow(true);\n        setModalData({name, type, dimension, totalResidents : residents.length })\n    }\n\n\n    const changePage = (item) =>{\n        setPageNumber(item)\n    };\n\n    const changePageLast = (number) => {\n        setPageNumber(number)\n    }\n    const changePageFirst = (number) => {\n        setPageNumber(number)\n    }\n    const changePageNext = () => {\n        if(pageNumber <= 6){\n            setPageNumber(pageNumber + 1)\n        }\n    }\n    const changePagePrev = () => {\n        if(pageNumber >= 2){\n            setPageNumber(pageNumber - 1)\n        }\n    }\n\n\n    return(\n        <div className='container d-flex flex-column align-items-center'>\n            <div className=\"characters mb-3\">\n                {locationsList === [] ? <p>Loading...</p> : \n                \n                locationsList.map(item=>{\n                    return(\n                        <Card className=\"location\" style={{ width: '18rem' }} key={item.id} onClick={() => setData(item)}>\n                            <Card.Body>\n                                <Card.Title>Name: {item.name}</Card.Title>\n                                <Card.Text>\n                                Type: {item.type}\n                                </Card.Text>\n                            </Card.Body>\n                        </Card>\n                    )\n                })}\n            </div>\n            <LocationModal\n                show={modalShow}\n                onHide={() => setModalShow(false)}\n                name={modalData.name}\n                type={modalData.type}\n                dimension={modalData.dimension}\n                residents={modalData.totalResidents}\n            />\n            <Pagination>\n                <Pagination.First onClick={()=>changePageFirst(1)}/>\n                <Pagination.Prev onClick={()=>changePagePrev()}/>\n                {\n                    totalPages.map(item=>{\n                        return(\n                            <Pagination.Item key={item} id={item} text={item} active={pageNumber === item? true:false} onClick={()=>changePage(item)}>\n                                {item}\n                            </Pagination.Item>\n                        )\n                    })\n                }\n                <Pagination.Next onClick={()=>changePageNext()}/>\n                <Pagination.Last onClick={()=>changePageLast(7)}/>\n            </Pagination>\n        </div>\n    )\n}\n\nexport default Locations;","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Characters from \"./Components/Characters\";\nimport Locations from \"./Components/Locations\";\n\nfunction App() {\n  const [isCharactersShown, setIsCharactersShow] = useState(false);\n  const [isLocationsShown, setIsLocationsShown] = useState(false);\n\n  const setCharacters = () =>{\n    setIsCharactersShow(true);\n    setIsLocationsShown(false)\n  }\n  const setLocations = () =>{\n    setIsCharactersShow(false);\n    setIsLocationsShown(true)\n  }\n  \n  return (\n    <div className=\"App d-flex flex-column align-items-center justify-content-center\">\n      <img id=\"first\" src=\"https://images-na.ssl-images-amazon.com/images/I/91MteSqsrJL.jpg\" className=\"rounded mt-3\" alt=\"img\"/>\n      <div className=\"buttons d-flex justify-content-center gap-5 mt-4\">\n        <Button className=\"btn\" variant=\"success\" onClick={setCharacters}>Characters</Button>\n        <Button className=\"btn\" variant=\"success\" onClick={setLocations}>Locations</Button>\n      </div>\n      <div className=\"content mt-4\">\n        {isCharactersShown &&  <Characters/>}\n        {isLocationsShown && <Locations/>}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}